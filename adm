import React, { useState, useEffect } from 'react';
import { 
  Users, Globe, Gift, Settings, Activity, BarChart3, Bell, Search, 
  Filter, CheckCircle, XCircle, Clock, Mail, ExternalLink, Eye,
  TrendingUp, TrendingDown, AlertTriangle, Shield, Zap
} from 'lucide-react';

const AdminDashboard = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [stats, setStats] = useState({
    totalUsers: 1247,
    activeSubdomains: 892,
    pendingRequests: 23,
    totalDonations: 156,
    monthlyGrowth: 12.5,
    serverUptime: 99.97
  });

  const [recentActivities] = useState([
    {
      id: 1,
      type: 'subdomain_approved',
      user: 'Ahmad Rizki',
      subdomain: 'portfolio.vinnesia.my.id',
      timestamp: '2 minutes ago',
      status: 'success'
    },
    {
      id: 2,
      type: 'donation_received',
      user: 'Sarah Dev',
      amount: 'Rp 50.000',
      timestamp: '15 minutes ago',
      status: 'success'
    },
    {
      id: 3,
      type: 'subdomain_requested',
      user: 'Budi Startup',
      subdomain: 'myapp.vinnesia.my.id',
      timestamp: '1 hour ago',
      status: 'pending'
    },
    {
      id: 4,
      type: 'user_registered',
      user: 'Dina Coder',
      provider: 'GitHub',
      timestamp: '2 hours ago',
      status: 'info'
    },
    {
      id: 5,
      type: 'subdomain_suspended',
      user: 'Spam User',
      subdomain: 'spam.vinnesia.my.id',
      timestamp: '1 day ago',
      status: 'warning'
    }
  ]);

  const [pendingRequests] = useState([
    {
      id: 1,
      user: 'Budi Startup',
      email: 'budi@example.com',
      subdomain: 'myapp.vinnesia.my.id',
      targetUrl: 'https://myapp.vercel.app',
      purpose: 'startup',
      description: 'Platform e-commerce untuk UMKM di Indonesia. Menggunakan Next.js dan Supabase...',
      requestDate: '2024-08-03',
      isCommercial: true
    },
    {
      id: 2,
      user: 'Maya Student',
      email: 'maya@student.ac.id', 
      subdomain: 'portfolio.vinnesia.my.id',
      targetUrl: 'https://maya-portfolio.github.io',
      purpose: 'education',
      description: 'Portfolio website untuk menampilkan project-project kuliah saya di bidang web development...',
      requestDate: '2024-08-03',
      isCommercial: false
    },
    {
      id: 3,
      user: 'Open Source Dev',
      email: 'dev@opensource.org',
      subdomain: 'docs.vinnesia.my.id',
      targetUrl: 'https://opensourceproject.netlify.app',
      purpose: 'opensource',
      description: 'Dokumentasi untuk library JavaScript open source yang membantu developer Indonesia...',
      requestDate: '2024-08-02',
      isCommercial: false
    }
  ]);

  const menuItems = [
    { id: 'overview', label: 'Overview', icon: BarChart3 },
    { id: 'users', label: 'Users', icon: Users },
    { id: 'subdomains', label: 'Subdomains', icon: Globe },
    { id: 'donations', label: 'Donations', icon: Gift },
    { id: 'activities', label: 'Activities', icon: Activity },
    { id: 'settings', label: 'Settings', icon: Settings }
  ];

  const getStatusColor = (status) => {
    switch (status) {
      case 'success': return 'text-green-400';
      case 'warning': return 'text-yellow-400';
      case 'error': return 'text-red-400';
      case 'pending': return 'text-blue-400';
      default: return 'text-slate-400';
    }
  };

  const getActivityIcon = (type) => {
    switch (type) {
      case 'subdomain_approved': return <CheckCircle className="w-4 h-4" />;
      case 'subdomain_rejected': return <XCircle className="w-4 h-4" />;
      case 'subdomain_requested': return <Clock className="w-4 h-4" />;
      case 'subdomain_suspended': return <AlertTriangle className="w-4 h-4" />;
      case 'donation_received': return <Gift className="w-4 h-4" />;
      case 'user_registered': return <Users className="w-4 h-4" />;
      default: return <Bell className="w-4 h-4" />;
    }
  };

  const handleApproveRequest = (requestId) => {
    console.log('Approving request:', requestId);
    alert('Subdomain request approved!');
  };

  const handleRejectRequest = (requestId) => {
    console.log('Rejecting request:', requestId);
    alert('Subdomain request rejected!');
  };

  const renderOverview = () => (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-slate-900/50 backdrop-blur-sm rounded-xl p-6 border border-purple-500/20">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-slate-400 text-sm">Total Users</p>
              <p className="text-2xl font-bold text-white">{stats.totalUsers.toLocaleString()}</p>
            </div>
            <Users className="w-8 h-8 text-purple-400" />
          </div>
          <div className="mt-4 flex items-center text-sm">
            <TrendingUp className="w-4 h-4 text-green-400 mr-1" />
            <span className="text-green-400">+{stats.monthlyGrowth}%</span>
            <span className="text-slate-400 ml-1">this month</span>
          </div>
        </div>

        <div className="bg-slate-900/50 backdrop-blur-sm rounded-xl p-6 border border-cyan-500/20">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-slate-400 text-sm">Active Subdomains</p>
              <p className="text-2xl font-bold text-white">{stats.activeSubdomains.toLocaleString()}</p>
            </div>
            <Globe className="w-8 h-8 text-cyan-400" />
          </div>
          <div className="mt-4 flex items-center text-sm">
            <TrendingUp className="w-4 h-4 text-green-400 mr-1" />
            <span className="text-green-400">+8.2%</span>
            <span className="text-slate-400 ml-1">this month</span>
          </div>
        </div>

        <div className="bg-slate-900/50 backdrop-blur-sm rounded-xl p-6 border border-yellow-500/20">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-slate-400 text-sm">Pending Requests</p>
              <p className="text-2xl font-bold text-white">{stats.pendingRequests}</p>
            </div>
            <Clock className="w-8 h-8 text-yellow-400" />
          </div>
          <div className="mt-4 flex items-center text-sm">
            <AlertTriangle className="w-4 h-4 text-yellow-400 mr-1" />
            <span className="text-yellow-400">Needs review</span>
          </div>
        </div>

        <div className="bg-slate-900/50 backdrop-blur-sm rounded-xl p-6 border border-green-500/20">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-slate-400 text-sm">Total Donations</p>
              <p className="text-2xl font-bold text-white">{stats.totalDonations}</p>
            </div>
            <Gift className="w-8 h-8 text-green-400" />
          </div>
          <div className="mt-4 flex items-center text-sm">
            <TrendingUp className="w-4 h-4 text-green-400 mr-1" />
            <span className="text-green-400">+15.3%</span>
            <span className="text-slate-400 ml-1">this month</span>
          </div>
        </div>
      </div>

      {/* System Status */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-1">
          <div className="bg-slate-900/50 backdrop-blur-sm rounded-xl p-6 border border-purple-500/20">
            <h3 className="text-lg font-semibold mb-4 flex items-center">
              <Shield className="w-5 h-5 text-purple-400 mr-2" />
              System Status
            </h3>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-slate-300">Server Uptime</span>
                <span className="text-green-400 font-semibold">{stats.serverUptime}%</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-slate-300">DNS Resolution</span>
                <span className="text-green-400 font-semibold">Healthy</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-slate-300">CDN Performance</span>
                <span className="text-green-400 font-semibold">Optimal</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-slate-300">Database</span>
                <span className="text-green-400 font-semibold">Connected</span>
              </div>
            </div>
          </div>
        </div>

        <div className="lg:col-span-2">
          <div className="bg-slate-900/50 backdrop-blur-sm rounded-xl p-6 border border-purple-500/20">
            <h3 className="text-lg font-semibold mb-4 flex items-center">
              <Activity className="w-5 h-5 text-cyan-400 mr-2" />
              Recent Activities
            </h3>
            <div className="space-y-3 max-h-64 overflow-y-auto">
              {recentActivities.map((activity) => (
                <div key={activity.id} className="flex items-start space-x-3 p-3 bg-slate-800/50 rounded-lg">
                  <div className={`${getStatusColor(activity.status)} mt-1`}>
                    {getActivityIcon(activity.type)}
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm text-white font-medium">
                      {activity.type.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                    </p>
                    <p className="text-sm text-slate-400 truncate">
                      {activity.user} - {activity.subdomain || activity.amount || activity.provider}
                    </p>
                    <p className="text-xs text-slate-500">{activity.timestamp}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderSubdomains = () => (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between">
        <h2 className="text-2xl font-bold text-white mb-4 md:mb-0">Subdomain Management</h2>
        <div className="flex items-center space-x-4">
          <div className="relative">
            <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400" />
            <input
              type="text"
              placeholder="Search subdomains..."
              className="pl-10 pr-4 py-2 bg-slate-800/50 border border-slate-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-slate-400"
            />
          </div>
          <button className="flex items-center px-4 py-2 bg-slate-800/50 border border-slate-600 rounded-lg hover:bg-slate-700/50 text-white">
            <Filter className="w-4 h-4 mr-2" />
            Filter
          </button>
        </div>
      </div>

      {/* Pending Requests */}
      <div className="bg-slate-900/50 backdrop-blur-sm rounded-xl border border-yellow-500/20">
        <div className="p-6 border-b border-yellow-500/20">
          <h3 className="text-lg font-semibold text-white flex items-center">
            <Clock className="w-5 h-5 text-yellow-400 mr-2" />
            Pending Requests ({pendingRequests.length})
          </h3>
        </div>
        <div className="divide-y divide-slate-700">
          {pendingRequests.map((request) => (
            <div key={request.id} className="p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-4 mb-3">
                    <h4 className="text-white font-semibold">{request.subdomain}</h4>
                    {request.isCommercial && (
                      <span className="px-2 py-1 bg-yellow-900/50 text-yellow-400 text-xs rounded-full border border-yellow-500/30">
                        Commercial
                      </span>
                    )}
                    <span className="px-2 py-1 bg-blue-900/50 text-blue-400 text-xs rounded-full border border-blue-500/30">
                      {request.purpose}
                    </span>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                      <p className="text-sm text-slate-400">User</p>
                      <p className="text-white">{request.user}</p>
                      <p className="text-slate-400 text-sm">{request.email}</p>
                    </div>
                    <div>
                      <p className="text-sm text-slate-400">Target URL</p>
                      <a href={request.targetUrl} target="_blank" rel="noopener noreferrer" 
                         className="text-cyan-400 hover:text-cyan-300 flex items-center">
                        <span className="truncate">{request.targetUrl}</span>
                        <ExternalLink className="w-3 h-3 ml-1 flex-shrink-0" />
                      </a>
                    </div>
                  </div>

                  <div className="mb-4">
                    <p className="text-sm text-slate-400 mb-1">Project Description</p>
                    <p className="text-slate-300 text-sm">{request.description}</p>
                  </div>

                  <p className="text-xs text-slate-500">Requested on {request.requestDate}</p>
                </div>

                <div className="flex items-center space-x-2 ml-4">
                  <button 
                    onClick={() => handleApproveRequest(request.id)}
                    className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg flex items-center"
                  >
                    <CheckCircle className="w-4 h-4 mr-1" />
                    Approve
                  </button>
                  <button 
                    onClick={() => handleRejectRequest(request.id)}
                    className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg flex items-center"
                  >
                    <XCircle className="w-4 h-4 mr-1" />
                    Reject
                  </button>
                  <button className="px-3 py-2 bg-slate-600 hover:bg-slate-700 text-white rounded-lg">
                    <Eye className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderUsers = () => (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between">
        <h2 className="text-2xl font-bold text-white mb-4 md:mb-0">User Management</h2>
        <div className="flex items-center space-x-4">
          <div className="relative">
            <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400" />
            <input
              type="text"
              placeholder="Search users..."
              className="pl-10 pr-4 py-2 bg-slate-800/50 border border-slate-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-slate-400"
            />
          </div>
        </div>
      </div>

      <div className="bg-slate-900/50 backdrop-blur-sm rounded-xl border border-purple-500/20 p-6">
        <p className="text-slate-400 text-center">User management interface will be implemented here...</p>
      </div>
    </div>
  );

  const renderDonations = () => (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between">
        <h2 className="text-2xl font-bold text-white mb-4 md:mb-0">Donation Management</h2>
      </div>

      <div className="bg-slate-900/50 backdrop-blur-sm rounded-xl border border-green-500/20 p-6">
        <p className="text-slate-400 text-center">Donation verification interface will be implemented here...</p>
      </div>
    </div>
  );

  const renderSettings = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-white">System Settings</h2>
      
      <div className="bg-slate-900/50 backdrop-blur-sm rounded-xl border border-purple-500/20 p-6">
        <p className="text-slate-400 text-center">System settings interface will be implemented here...</p>
      </div>
    </div>
  );

  const renderActivities = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-white">Activity Logs</h2>
      
      <div className="bg-slate-900/50 backdrop-blur-sm rounded-xl border border-cyan-500/20 p-6">
        <p className="text-slate-400 text-center">Activity logs interface will be implemented here...</p>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-950 via-purple-950 to-slate-950 text-white">
      {/* Header */}
      <header className="border-b border-purple-500/20 bg-slate-950/50 backdrop-blur-md">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <Shield className="w-8 h-8 text-purple-400" />
              <div>
                <h1 className="text-xl font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent">
                  VIN NESIA Admin
                </h1>
                <p className="text-xs text-slate-400">Subdomain Management Portal</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <button className="relative p-2 text-slate-400 hover:text-white">
                <Bell className="w-5 h-5" />
                <span className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full text-xs flex items-center justify-center text-white">
                  {stats.pendingRequests}
                </span>
              </button>
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gradient-to-r from-purple-600 to-cyan-600 rounded-full flex items-center justify-center font-bold">
                  A
                </div>
                <span className="text-sm">Admin</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex flex-col lg:flex-row gap-8">
          {/* Sidebar */}
          <div className="lg:w-64 flex-shrink-0">
            <nav className="bg-slate-900/50 backdrop-blur-sm rounded-xl border border-purple-500/20 p-4">
              <ul className="space-y-2">
                {menuItems.map((item) => {
                  const Icon = item.icon;
                  return (
                    <li key={item.id}>
                      <button
                        onClick={() => setActiveTab(item.id)}
                        className={`w-full flex items-center px-3 py-2 rounded-lg text-left transition-colors ${
                          activeTab === item.id
                            ? 'bg-purple-600/20 text-purple-400 border border-purple-500/30'
                            : 'text-slate-400 hover:text-white hover:bg-slate-800/50'
                        }`}
                      >
                        <Icon className="w-4 h-4 mr-3" />
                        {item.label}
                        {item.id === 'subdomains' && stats.pendingRequests > 0 && (
                          <span className="ml-auto bg-yellow-500 text-black text-xs px-2 py-0.5 rounded-full">
                            {stats.pendingRequests}
                          </span>
                        )}
                      </button>
                    </li>
                  );
                })}
              </ul>
            </nav>
          </div>

          {/* Main Content */}
          <div className="flex-1">
            {activeTab === 'overview' && renderOverview()}
            {activeTab === 'users' && renderUsers()}
            {activeTab === 'subdomains' && renderSubdomains()}
            {activeTab === 'donations' && renderDonations()}
            {activeTab === 'activities' && renderActivities()}
            {activeTab === 'settings' && renderSettings()}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminDashboard;
